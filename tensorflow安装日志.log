
零、前置条件：
    1. bazel:
        一定要去下194M的 bazel-0.5.4-installer-linux-x86_64.sh, 来装，安装时多看提示。否则问题多多。
        bazel运行时，一定要在workspace中运行，所以下面的"安装步骤5 ~ 7"，都要在git下来的tensorflow目录中执行。不能随便。
        
    2. pip:
        升级到9.0。 否则不知道报神魔错。
        sudo -H pip install --upgrade pip
    
 
一、自编译安装步骤：
    1. 卸载已经安装的tensorflow：
        sudo pip uninstall tensorflow  
        
    2. git Tensorflow仓库
        git clone --recurse-submodules https://github.com/tensorflow/tensorflow  

    3. 安装Bazel：
        1. sudo apt-get install pkg-config zip g++ zlib1g-dev unzip python
        2. 下载:bazel-0.5.2-installer-linux-x86_64.sh  （地址：https://github.com/bazelbuild/bazel/releases，百八十M左右，用BT下载最宜）
        3. ./bazel-0.5.2-installer-linux-x86_64.sh --user
        4. ~/.bashrc中加入: export PATH="$PATH:$HOME/bin"
        5. 设置bazel工作路径：在 ~/.bazelrc中修改：%workspace%:/home/yhy/tmp/tensorflow 【即，/home/yhy/tmp/tensorflow是我的工作路径，记住用绝对路径】

    4. 安装tensorflow所需要的其他依赖 
        sudo apt-get install python-numpy python-dev python-pip python-wheel 

    5. 进入tensorflow文件夹，运行tensorflow的配置程序：
        ./configure  
            [
            配置项： 
                XLA JIT： tf运行优化器
                cuda: 打开时，要指定版本(命令：nvcc -V)，位置（例如：/usr/local/cuda-9.1/）
                cudnn: 要求指定version，我的是: 7.1.2
                TensorRT：TensorRT是一个优化深度学习模型的库，用于在生产环境中的GPU上创建运行时部署。
                        /opt/TensorRT-4.0.0.3/lib
               「Cuda compute capabilities」的参数：https://blog.csdn.net/allyli0022/article/details/54628987  【1070是6.1】
            ]

    6. 编译生成pip的安装包[16:06 ~ 16:29 = 23分钟][+cuda~ 2小时]
        bazel build -c opt --copt=-msse3 --copt=-msse4.1 --copt=-msse4.2 --copt=-mavx //tensorflow/tools/pip_package:build_pip_package
        [*]: 原来有个“--copt=-mavx2 --copt=-mfma”导致运行错误, 我的只支持[SSE4.1,SSE4.2,AVX]，只要这些就够了。
        [*]: 如果这一步你执行多次，遇到问题，去“/home/yhy/.cache/bazel/”把里面的所有文件都删了。
        
    7. 在/tmp/tensorflow_pkg文件夹中创建pip的安装包
        bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg 
        [*]：不用担心权限问题，能成功创建/tmp/tensorflow_pkg
    8. pip 安装tensorflow:
        sudo pip install /tmp/tensorflow_pkg/tensorflow-1.3.0-cp27-cp27mu-linux_x86_64.whl
        [*]: 根据实际tensorflow_pkg中是什麽就运行什麽。
        [*]: python2.7 用pip, python3 用 pip3

    9. 运行&效率：
        python train.py
        效率：经测试比用pip下Google的安装包，【快25%】。


二、virtualenv安装官网bin步骤：
  1. 安装 pip 和 virtualenv：
        $ sudo apt-get install python-pip python-dev python-virtualenv #【 for Python 2.7】
        $ sudo apt-get install python3-pip python3-dev python-virtualenv # 【for Python 3.n  ，以下默认会为python2.7】
  
  2. 创建virtualenv 环境：
        $ virtualenv --system-site-packages ~/tensorflow
        【*】目录“~/tensorflow”，可以改。
  3. 激活virtualenv环境：
        $ source ~/tensorflow/bin/activate
        会有如下反应：
            (tensorflow)$ 
  4. 确保pip >= 8.1 
        (tensorflow)$ easy_install -U pip
    
  5. 在virtualenv 中安装 TensorFlow 
        (tensorflow)$ pip install --upgrade tensorflow      # for Python 2.7
        (tensorflow)$ pip install --upgrade tensorflow-gpu  # for Python 2.7 and GPU    
    
  6. 【*】如果步骤5失败了，运行以下命令手动安装
        (tensorflow)$ pip install --upgrade tfBinaryURL   # Python 2.7
    tfBinaryURL：是Google编译好的通用安装包，要想用最新的，就去官网找，例如：
      Python 2.7
          CPU only:    https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.3.0-cp27-none-linux_x86_64.whl
          GPU support: https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.3.0-cp27-none-linux_x86_64.whl
  
  
《$$$$》. 附录
    1. 安装了gpu版本的tf，但是想关闭
        import os  
        os.environ["CUDA_VISIBLE_DEVICES"]="-1"      
        import tensorflow as tf  